const express = require("express");
const cookieParser = require("cookie-parser");
const session = require("express-session");
const { body, validationResult } = require("express-validator");
const csurf = require("csurf");
const app = express();

// Middleware
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(session({ secret: "kawkaw", resave: true, saveUninitialized: true }));
app.use(csurf({ cookie: true }));
app.set("view engine", "ejs");
app.set("views", "views");

app.use((req, res, next) => {
  console.log("Session Data:", req.session);
  next();
});

//database
const users = [
  { username: "kawtar", password: "kawkaw2@" },
  { username: "meriem", password: "meriem2@" },
  { username: "hanan", password: "hanan2@" },
];

// Routes
app.get("/", (req, res) => {
  res.render("index", { csrfToken: req.csrfToken() });
});

app.post(
  "/login",
  [
    body("username").notEmpty().withMessage("Username is required").trim(),
    body("password")
      .notEmpty()
      .withMessage("Password is required")
      .isLength({ min: 5 })
      .withMessage("Password must be at least 6 characters long")
      .escape(),
  ],
  (req, res) => {
    try {
      const { username, password } = req.body;
      // Authenticate user (vulnerable code for the challenge)
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.render("login", {
          csrfToken: req.csrfToken(),
          errors: errors.array(),
        });
      }
      const findUser = users.find((user) => {
        return user.username === username && user.password === password;
      });
      console.log(findUser);
      if (findUser) {
        req.session.authenticated = true;
        req.session.username = username;
        res.redirect("/profile");
      } else {
        res.render("login", {
          csrfToken: req.csrfToken(),
          errors: [{ msg: "Username or password are incorrect" }],
        });
      }
    } catch (err) {
      res.send("an error occures", err.message);
    }
  }
);

app.get("/login", (req, res) => {
  if (req.session.authenticated) {
    res.redirect("/profile");
  } else {
    res.render("login", { csrfToken: req.csrfToken() });
  }
});

app.get("/profile", (req, res) => {
  if (req.session.authenticated) {
    res.render("profile", { username: req.session.username });
  } else {
    res.redirect("/login");
  }
});
app.get("/logout", (req, res) => {
  req.session.destroy();
  res.redirect("/");
});

// Server
app.listen(3000, () => {
  console.log("Server running on port 3000");
});
